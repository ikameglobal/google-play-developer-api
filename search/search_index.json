{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Home","text":""},{"location":"#google-play-developer-api","title":"google-play-developer-api","text":"<p>Wrapper for APIs</p>"},{"location":"#features","title":"Features","text":"<ul> <li>Crash rate hourly and daily report from Google Play Developer API</li> <li>ANR rate hourly and daily report from Google Play Developer API</li> </ul>"},{"location":"api/","title":"Modules","text":""},{"location":"api/#google_play_developer_api.report.base_report.BaseReportingService","title":"<code>BaseReportingService</code>","text":"Source code in <code>google_play_developer_api/report/base_report.py</code> <pre><code>class BaseReportingService:\n    def __init__(self, credentials_path: str):\n        credentials = service_account.Credentials.from_service_account_file(\n            credentials_path, scopes=[\"https://www.googleapis.com/auth/playdeveloperreporting\"]\n        )\n        self._reporting_service = build(serviceName=\"playdeveloperreporting\",\n                                        version=\"v1beta1\",\n                                        credentials=credentials,\n                                        cache_discovery=False)\n\n        self._metric_sets = {\n            'anomalies': self._reporting_service.anomalies(),\n            'anrRateMetricSet': self._reporting_service.vitals().anrrate(),\n            'crashRateMetricSet': self._reporting_service.vitals().crashrate(),\n            'errorCountMetricSet': self._reporting_service.vitals().errors().counts(),\n            'errorIssues': self._reporting_service.vitals().errors().issues(),\n            'errorReports': self._reporting_service.vitals().errors().reports(),\n            'excessiveWakeupRateMetricSet': self._reporting_service.vitals().excessivewakeuprate(),\n            'slowRenderingRateMetricSet': self._reporting_service.vitals().slowrenderingrate(),\n            'slowStartRateMetricSet': self._reporting_service.vitals().slowstartrate(),\n            'stuckBackgroundWakelockRateMetricSet': self._reporting_service.vitals().stuckbackgroundwakelockrate(),\n        }\n\n    def _query(\n        self,\n        app_package_name: str = \"\",\n        timeline_spec: dict = {},\n        dimensions: list[str] = [],\n        metrics: list[str] = [],\n        metric_set: str = \"\",\n        page_size: int = 50000,\n        retry_count: int = 3,\n        sleep_time: int = 15,\n    ) -&gt; list[dict]:\n\"\"\"\n        Query report data from Google Play Developer API\n\n        Note: Read this doc\n        https://developers.google.com/play/developer/reporting/reference/rest\n\n        Args:\n            app_package_name: App package name\n            timeline_spec: Timeline spec (see docs above)\n            dimensions: Dimensions (see docs above)\n            metrics: Metrics (see docs above)\n            metric_set: One of ['anrRateMetricSet', 'crashRateMetricSet', 'errorCountMetricSet', 'excessiveWakeupRateMetricSet', 'slowRenderingRateMetricSet', 'slowStartRateMetricSet', 'stuckBackgroundWakelockRateMetricSet']\n            page_size: Page size\n\n        Returns:\n            List of dicts with report data\n        \"\"\"\n        # GET DATA\n        page_token = \"\"\n        rows = []\n        while True:\n            body = {\n                \"dimensions\": dimensions,\n                \"metrics\": metrics,\n                \"timelineSpec\": timeline_spec,\n                \"pageSize\": page_size,\n                \"pageToken\": page_token\n            }\n\n            for i in range(retry_count):\n                try:\n                    report = self._metric_sets[metric_set].query(name=f\"apps/{app_package_name}/{metric_set}\",\n                                                                 body=body).execute()\n                    break\n                except HttpError as e:\n                    if e.resp.status == 403:\n                        logging.warning(f'Permission denied for {app_package_name}')\n                    elif e.resp.status == 400:\n                        logging.warning(f'Bad request for {app_package_name}, {e.reason}')\n                        raise e\n                    return []\n\n                except TimeoutError as e:\n                    raise e\n                except Exception as e:\n                    if i == retry_count - 1:\n                        raise e\n                    else:\n                        time.sleep(sleep_time)\n                        logging.warning(f\"Retry {i + 1}/{retry_count}...\")\n                        continue\n\n            rows.extend(report.get(\"rows\", []))\n            page_token = report.get(\"nextPageToken\", \"\")\n            if not page_token:\n                break\n\n        # PARSE DATA\n        result_list = []\n        for row in rows:\n            year = row[\"startTime\"].get(\"year\")\n            month = row[\"startTime\"].get(\"month\")\n            day = row[\"startTime\"].get(\"day\")\n\n            # Add hour if aggregationPeriod is HOURLY\n            if timeline_spec[\"aggregationPeriod\"] == \"HOURLY\":\n                hour = row[\"startTime\"].get(\"hours\", \"00\")\n                hour = f\" {hour}:00\"\n            else:\n                hour = \"\"\n\n            result = {\n                \"eventDate\": f\"{year}-{month}-{day}{hour}\",\n                \"timeZone\": row[\"startTime\"][\"timeZone\"][\"id\"],\n                \"appPackageName\": app_package_name,\n            }\n\n            # dimensions\n            _dimensions = row.get(\"dimensions\", [])\n            for dimension in _dimensions:\n                if \"stringValue\" in dimension:\n                    result[f'{dimension[\"dimension\"]}'] = dimension[\"stringValue\"]\n                elif \"int64Value\" in dimension:\n                    result[f'{dimension[\"dimension\"]}'] = dimension[\"int64Value\"]\n                else:\n                    result[f'{dimension[\"dimension\"]}'] = \"\"\n            # metrics\n            _metrics = row.get(\"metrics\", [])\n            for metric in _metrics:\n                result[f'{metric[\"metric\"]}'] = metric[\"decimalValue\"][\"value\"] if \"decimalValue\" in metric else \"\"\n\n            result_list.append(result)\n\n        return result_list\n\n    def get_freshnesses(self,\n                        app_package_name: str = None,\n                        metric_set: str = None,\n                        retry_count: int = 3,\n                        sleep_time: int = 5):\n\"\"\"\n        Get freshnesses of a report\n\n        Args:\n            app_package_name: App package name\n            metric_set: One of ['anrRateMetricSet', 'crashRateMetricSet', 'errorCountMetricSet', 'excessiveWakeupRateMetricSet', 'slowRenderingRateMetricSet', 'slowStartRateMetricSet', 'stuckBackgroundWakelockRateMetricSet']\n            retry_count: number of retries\n            sleep_time: time to sleep between retries (seconds)\n\n        Returns:\n            Dict with freshnesses\n        \"\"\"\n        import time\n\n        metric_set = self._metric_set if not metric_set else metric_set  # Default of each child class\n        for i in range(retry_count):\n            try:\n                data = self._metric_sets[metric_set].get(name=f\"apps/{app_package_name}/{metric_set}\").execute()\n                break\n            except Exception as e:\n                if i == retry_count - 1:\n                    raise e\n                else:\n                    time.sleep(sleep_time)\n                    continue\n\n        freshnesses = data.get('freshnessInfo', {}).get('freshnesses', [])\n        result = {\n            'HOURLY': {},\n            'DAILY': {},\n        }\n\n        for freshness in freshnesses:\n            latest_end_time = freshness.get('latestEndTime', {})\n            time_zone = latest_end_time.get('timeZone', {})\n            year = latest_end_time.get('year')\n            month = latest_end_time.get('month')\n            day = latest_end_time.get('day')\n            hour = latest_end_time.get('hours', 0)\n\n            result[freshness['aggregationPeriod']] = {\n                'event_date': f\"{year}-{month}-{day} {hour}:00\",\n                'time_zone': time_zone,\n            }\n\n        return result\n\n    def get_hourly(\n        self,\n        app_package_name: str = \"\",\n        start_time: str = \"YYYY-MM-DD HH:MM\",\n        end_time: str = \"YYYY-MM-DD HH:MM\",\n        dimensions: list[str] = [],\n        metrics: list[str] = [],\n        metric_set: str = None,\n        **kwargs,\n    ) -&gt; list[dict]:\n\"\"\"\n        Get hourly report data from Google Play Developer API\n\n        Args:\n            app_package_name: App package name\n            start_time: Start time (format: YYYY-MM-DD HH:MM)\n            end_time: End time (format: YYYY-MM-DD HH:MM)\n            dimensions: Dimensions\n            metrics: Metrics\n            metric_set: One of ['anrRateMetricSet', 'crashRateMetricSet', 'errorCountMetricSet', 'excessiveWakeupRateMetricSet', 'slowRenderingRateMetricSet', 'slowStartRateMetricSet', 'stuckBackgroundWakelockRateMetricSet']\n\n        Returns:\n            List of dicts with report data\n        \"\"\"\n        dimensions = self._default_dimensions if dimensions is None else dimensions\n        metrics = self._default_metrics if metrics is None else metrics\n        metric_set = self._metric_set if metric_set is None else metric_set  # Default of each child class\n\n        start_time = datetime.datetime.strptime(start_time, \"%Y-%m-%d %H:%M\")\n        end_time = datetime.datetime.strptime(end_time, \"%Y-%m-%d %H:%M\")\n\n        timeline_spec = {\n            \"aggregationPeriod\": \"HOURLY\",\n            \"startTime\": {\n                \"year\": start_time.year,\n                \"month\": start_time.month,\n                \"day\": start_time.day,\n                \"hours\": start_time.hour,\n            },\n            \"endTime\": {\n                \"year\": end_time.year,\n                \"month\": end_time.month,\n                \"day\": end_time.day,\n                \"hours\": end_time.hour,\n            },\n        }\n\n        return self._query(\n            app_package_name=app_package_name,\n            timeline_spec=timeline_spec,\n            dimensions=dimensions,\n            metrics=metrics,\n            metric_set=metric_set,\n            **kwargs,\n        )\n\n    def get_daily(\n        self,\n        app_package_name: str = \"\",\n        start_time: str = \"YYYY-MM-DD\",\n        end_time: str = \"YYYY-MM-DD\",\n        dimensions: list[str] = None,\n        metrics: list[str] = None,\n        metric_set: str = None,\n        **kwargs,\n    ) -&gt; list[dict]:\n\"\"\"\n        Get daily report data from Google Play Developer API\n\n        Args:\n            app_package_name: App package name\n            start_time: Start time (format: YYYY-MM-DD)\n            end_time: End time (format: YYYY-MM-DD)\n            dimensions: Dimensions\n            metrics: Metrics\n            metric_set: One of ['anrRateMetricSet', 'crashRateMetricSet', 'errorCountMetricSet', 'excessiveWakeupRateMetricSet', 'slowRenderingRateMetricSet', 'slowStartRateMetricSet', 'stuckBackgroundWakelockRateMetricSet']\n\n        Returns:\n            List of dicts with report data\n        \"\"\"\n        dimensions = self._default_dimensions if dimensions is None else dimensions\n        metrics = self._default_metrics if metrics is None else metrics\n        metric_set = self._metric_set if metric_set is None else metric_set  # Default of each child class\n\n        start_time = datetime.datetime.strptime(start_time, \"%Y-%m-%d\")\n        end_time = datetime.datetime.strptime(end_time, \"%Y-%m-%d\")\n\n        timeline_spec = {\n            \"aggregationPeriod\": \"DAILY\",\n            \"startTime\": {\n                \"year\": start_time.year,\n                \"month\": start_time.month,\n                \"day\": start_time.day,\n                \"timeZone\": {\"id\": \"America/Los_Angeles\"},\n            },\n            \"endTime\": {\n                \"year\": end_time.year,\n                \"month\": end_time.month,\n                \"day\": end_time.day,\n                \"timeZone\": {\"id\": \"America/Los_Angeles\"},\n            },\n        }\n\n        return self._query(\n            app_package_name=app_package_name,\n            timeline_spec=timeline_spec,\n            dimensions=dimensions,\n            metrics=metrics,\n            metric_set=metric_set,\n            **kwargs,\n        )\n</code></pre>"},{"location":"api/#google_play_developer_api.report.base_report.BaseReportingService.get_daily","title":"<code>get_daily(app_package_name='', start_time='YYYY-MM-DD', end_time='YYYY-MM-DD', dimensions=None, metrics=None, metric_set=None, **kwargs)</code>","text":"<p>Get daily report data from Google Play Developer API</p> <p>Parameters:</p> Name Type Description Default <code>app_package_name</code> <code>str</code> <p>App package name</p> <code>''</code> <code>start_time</code> <code>str</code> <p>Start time (format: YYYY-MM-DD)</p> <code>'YYYY-MM-DD'</code> <code>end_time</code> <code>str</code> <p>End time (format: YYYY-MM-DD)</p> <code>'YYYY-MM-DD'</code> <code>dimensions</code> <code>list[str]</code> <p>Dimensions</p> <code>None</code> <code>metrics</code> <code>list[str]</code> <p>Metrics</p> <code>None</code> <code>metric_set</code> <code>str</code> <p>One of ['anrRateMetricSet', 'crashRateMetricSet', 'errorCountMetricSet', 'excessiveWakeupRateMetricSet', 'slowRenderingRateMetricSet', 'slowStartRateMetricSet', 'stuckBackgroundWakelockRateMetricSet']</p> <code>None</code> <p>Returns:</p> Type Description <code>list[dict]</code> <p>List of dicts with report data</p> Source code in <code>google_play_developer_api/report/base_report.py</code> <pre><code>def get_daily(\n    self,\n    app_package_name: str = \"\",\n    start_time: str = \"YYYY-MM-DD\",\n    end_time: str = \"YYYY-MM-DD\",\n    dimensions: list[str] = None,\n    metrics: list[str] = None,\n    metric_set: str = None,\n    **kwargs,\n) -&gt; list[dict]:\n\"\"\"\n    Get daily report data from Google Play Developer API\n\n    Args:\n        app_package_name: App package name\n        start_time: Start time (format: YYYY-MM-DD)\n        end_time: End time (format: YYYY-MM-DD)\n        dimensions: Dimensions\n        metrics: Metrics\n        metric_set: One of ['anrRateMetricSet', 'crashRateMetricSet', 'errorCountMetricSet', 'excessiveWakeupRateMetricSet', 'slowRenderingRateMetricSet', 'slowStartRateMetricSet', 'stuckBackgroundWakelockRateMetricSet']\n\n    Returns:\n        List of dicts with report data\n    \"\"\"\n    dimensions = self._default_dimensions if dimensions is None else dimensions\n    metrics = self._default_metrics if metrics is None else metrics\n    metric_set = self._metric_set if metric_set is None else metric_set  # Default of each child class\n\n    start_time = datetime.datetime.strptime(start_time, \"%Y-%m-%d\")\n    end_time = datetime.datetime.strptime(end_time, \"%Y-%m-%d\")\n\n    timeline_spec = {\n        \"aggregationPeriod\": \"DAILY\",\n        \"startTime\": {\n            \"year\": start_time.year,\n            \"month\": start_time.month,\n            \"day\": start_time.day,\n            \"timeZone\": {\"id\": \"America/Los_Angeles\"},\n        },\n        \"endTime\": {\n            \"year\": end_time.year,\n            \"month\": end_time.month,\n            \"day\": end_time.day,\n            \"timeZone\": {\"id\": \"America/Los_Angeles\"},\n        },\n    }\n\n    return self._query(\n        app_package_name=app_package_name,\n        timeline_spec=timeline_spec,\n        dimensions=dimensions,\n        metrics=metrics,\n        metric_set=metric_set,\n        **kwargs,\n    )\n</code></pre>"},{"location":"api/#google_play_developer_api.report.base_report.BaseReportingService.get_freshnesses","title":"<code>get_freshnesses(app_package_name=None, metric_set=None, retry_count=3, sleep_time=5)</code>","text":"<p>Get freshnesses of a report</p> <p>Parameters:</p> Name Type Description Default <code>app_package_name</code> <code>str</code> <p>App package name</p> <code>None</code> <code>metric_set</code> <code>str</code> <p>One of ['anrRateMetricSet', 'crashRateMetricSet', 'errorCountMetricSet', 'excessiveWakeupRateMetricSet', 'slowRenderingRateMetricSet', 'slowStartRateMetricSet', 'stuckBackgroundWakelockRateMetricSet']</p> <code>None</code> <code>retry_count</code> <code>int</code> <p>number of retries</p> <code>3</code> <code>sleep_time</code> <code>int</code> <p>time to sleep between retries (seconds)</p> <code>5</code> <p>Returns:</p> Type Description <p>Dict with freshnesses</p> Source code in <code>google_play_developer_api/report/base_report.py</code> <pre><code>def get_freshnesses(self,\n                    app_package_name: str = None,\n                    metric_set: str = None,\n                    retry_count: int = 3,\n                    sleep_time: int = 5):\n\"\"\"\n    Get freshnesses of a report\n\n    Args:\n        app_package_name: App package name\n        metric_set: One of ['anrRateMetricSet', 'crashRateMetricSet', 'errorCountMetricSet', 'excessiveWakeupRateMetricSet', 'slowRenderingRateMetricSet', 'slowStartRateMetricSet', 'stuckBackgroundWakelockRateMetricSet']\n        retry_count: number of retries\n        sleep_time: time to sleep between retries (seconds)\n\n    Returns:\n        Dict with freshnesses\n    \"\"\"\n    import time\n\n    metric_set = self._metric_set if not metric_set else metric_set  # Default of each child class\n    for i in range(retry_count):\n        try:\n            data = self._metric_sets[metric_set].get(name=f\"apps/{app_package_name}/{metric_set}\").execute()\n            break\n        except Exception as e:\n            if i == retry_count - 1:\n                raise e\n            else:\n                time.sleep(sleep_time)\n                continue\n\n    freshnesses = data.get('freshnessInfo', {}).get('freshnesses', [])\n    result = {\n        'HOURLY': {},\n        'DAILY': {},\n    }\n\n    for freshness in freshnesses:\n        latest_end_time = freshness.get('latestEndTime', {})\n        time_zone = latest_end_time.get('timeZone', {})\n        year = latest_end_time.get('year')\n        month = latest_end_time.get('month')\n        day = latest_end_time.get('day')\n        hour = latest_end_time.get('hours', 0)\n\n        result[freshness['aggregationPeriod']] = {\n            'event_date': f\"{year}-{month}-{day} {hour}:00\",\n            'time_zone': time_zone,\n        }\n\n    return result\n</code></pre>"},{"location":"api/#google_play_developer_api.report.base_report.BaseReportingService.get_hourly","title":"<code>get_hourly(app_package_name='', start_time='YYYY-MM-DD HH:MM', end_time='YYYY-MM-DD HH:MM', dimensions=[], metrics=[], metric_set=None, **kwargs)</code>","text":"<p>Get hourly report data from Google Play Developer API</p> <p>Parameters:</p> Name Type Description Default <code>app_package_name</code> <code>str</code> <p>App package name</p> <code>''</code> <code>start_time</code> <code>str</code> <p>Start time (format: YYYY-MM-DD HH:MM)</p> <code>'YYYY-MM-DD HH:MM'</code> <code>end_time</code> <code>str</code> <p>End time (format: YYYY-MM-DD HH:MM)</p> <code>'YYYY-MM-DD HH:MM'</code> <code>dimensions</code> <code>list[str]</code> <p>Dimensions</p> <code>[]</code> <code>metrics</code> <code>list[str]</code> <p>Metrics</p> <code>[]</code> <code>metric_set</code> <code>str</code> <p>One of ['anrRateMetricSet', 'crashRateMetricSet', 'errorCountMetricSet', 'excessiveWakeupRateMetricSet', 'slowRenderingRateMetricSet', 'slowStartRateMetricSet', 'stuckBackgroundWakelockRateMetricSet']</p> <code>None</code> <p>Returns:</p> Type Description <code>list[dict]</code> <p>List of dicts with report data</p> Source code in <code>google_play_developer_api/report/base_report.py</code> <pre><code>def get_hourly(\n    self,\n    app_package_name: str = \"\",\n    start_time: str = \"YYYY-MM-DD HH:MM\",\n    end_time: str = \"YYYY-MM-DD HH:MM\",\n    dimensions: list[str] = [],\n    metrics: list[str] = [],\n    metric_set: str = None,\n    **kwargs,\n) -&gt; list[dict]:\n\"\"\"\n    Get hourly report data from Google Play Developer API\n\n    Args:\n        app_package_name: App package name\n        start_time: Start time (format: YYYY-MM-DD HH:MM)\n        end_time: End time (format: YYYY-MM-DD HH:MM)\n        dimensions: Dimensions\n        metrics: Metrics\n        metric_set: One of ['anrRateMetricSet', 'crashRateMetricSet', 'errorCountMetricSet', 'excessiveWakeupRateMetricSet', 'slowRenderingRateMetricSet', 'slowStartRateMetricSet', 'stuckBackgroundWakelockRateMetricSet']\n\n    Returns:\n        List of dicts with report data\n    \"\"\"\n    dimensions = self._default_dimensions if dimensions is None else dimensions\n    metrics = self._default_metrics if metrics is None else metrics\n    metric_set = self._metric_set if metric_set is None else metric_set  # Default of each child class\n\n    start_time = datetime.datetime.strptime(start_time, \"%Y-%m-%d %H:%M\")\n    end_time = datetime.datetime.strptime(end_time, \"%Y-%m-%d %H:%M\")\n\n    timeline_spec = {\n        \"aggregationPeriod\": \"HOURLY\",\n        \"startTime\": {\n            \"year\": start_time.year,\n            \"month\": start_time.month,\n            \"day\": start_time.day,\n            \"hours\": start_time.hour,\n        },\n        \"endTime\": {\n            \"year\": end_time.year,\n            \"month\": end_time.month,\n            \"day\": end_time.day,\n            \"hours\": end_time.hour,\n        },\n    }\n\n    return self._query(\n        app_package_name=app_package_name,\n        timeline_spec=timeline_spec,\n        dimensions=dimensions,\n        metrics=metrics,\n        metric_set=metric_set,\n        **kwargs,\n    )\n</code></pre>"},{"location":"installation/","title":"Installation","text":""},{"location":"installation/#stable-release","title":"Stable release","text":"<p>To install google-play-developer-api, run this command in your terminal:</p> <pre><code>pip install google-play-developer-api\n</code></pre> <p>This is the preferred method to install google-play-developer-api, as it will always install the most recent stable release.</p> <p>If you don't have pip installed, this Python installation guide can guide you through the process.</p>"},{"location":"installation/#from-source","title":"From source","text":"<p>The source for google-play-developer-api can be downloaded from the Github repo.</p> <p>You can either clone the public repository:</p> <pre><code>git clone git://github.com/ikameglobal/google-play-developer-api\n</code></pre> <p>Or download the tarball:</p> <pre><code>curl -OJL https://github.com/ikameglobal/google-play-developer-api/tarball/main\n</code></pre> <p>Once you have a copy of the source, you can install it with:</p> <pre><code>pip install .\n</code></pre>"},{"location":"usage/","title":"Usage","text":"<p>For more information about the API (params, columns), see the Reporting API.</p>"},{"location":"usage/#reporting-api","title":"Reporting API","text":""},{"location":"usage/#get-crash-rate-hourly-report","title":"Get crash rate hourly report","text":"<pre><code>from google_play_developer_api.report import CrashRateReport\n\nreport = CrashRateReport(credentials_path='&lt;path-to-your-credentials&gt;')\nresult = report.get_hourly(app_package_name='your-app-package',\n                           start_time='YYYY-MM-DD HH:MM',\n                           end_time='YYYY-MM-DD HH:MM')\nprint(result)\n</code></pre>"},{"location":"usage/#get-anr-rate-daily-report","title":"Get ANR rate daily report","text":"<pre><code>from google_play_developer_api.report import AnrRateReport\n\nreport = AnrRateReport(credentials_path='&lt;path-to-your-credentials&gt;')\nresult = report.get_daily(app_package_name='your-app-package',\n                          start_time='YYYY-MM-DD',\n                          end_time='YYYY-MM-DD')\n</code></pre>"}]}